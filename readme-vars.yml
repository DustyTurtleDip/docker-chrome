---

# project information
project_name: google-chrome
project_url: "https://www.google.com/chrome/"
project_logo: "https://upload.wikimedia.org/wikipedia/commons/a/a5/Google_Chrome_icon_%28September_2014%29.svg"
project_blurb: "[Google Chrome]({{ project_url }}) is a web browser from Google. This repository, `docker-google-chrome`, builds the `linuxserver/chromium` Docker image. The image provides Google Chrome on amd64 platforms and Chromium on arm64v8 platforms, offering a consistent user experience where possible."
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-google-chrome"
project_categories: "Web Browser"
project_blurb_optional_extras_enabled: false
# supported architectures
available_architectures:
  - {arch: "{{ arch_x86_64 }}", tag: "latest"}
  - {arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
# development version
development_versions: false
# container parameters
common_param_env_vars_enabled: true
param_container_name: "chromium"
param_usage_include_env: true
param_env_vars:
  - {env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London."}
param_usage_include_vols: true
param_volumes:
  - {vol_path: "/config", vol_host_path: "/path/to/config", desc: "Users home directory in the container, stores local files and settings"}
param_usage_include_ports: true
param_ports:
  - {external_port: "3000", internal_port: "3000", port_desc: "Google Chrome/Chromium desktop gui."}
  - {external_port: "3001", internal_port: "3001", port_desc: "HTTPS Google Chrome/Chromium desktop gui."}
custom_params:
  - {name: "shm-size", name_compose: "shm_size", value: "1gb", desc: "This is needed for any modern website to function like youtube."}
# optional variables
opt_param_usage_include_env: true
opt_param_env_vars:
  - {env_var: "CHROME_CLI", env_value: "https://www.linuxserver.io/", desc: "Specify one or multiple browser CLI flags (Google Chrome on amd64, Chromium on arm64 for the linuxserver/chromium image), this string will be passed to the application in full."}
opt_security_opt_param: true
opt_security_opt_param_vars:
  - {run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "For Docker Engine only, many modern gui apps need this to function on older hosts as syscalls are unknown to Docker. The browser (Chromium on arm64, and potentially Google Chrome on amd64 in some environments using the linuxserver/chromium image) may require this to run without sandbox."}
# Kasm blurb settings
kasm_blurb: true
show_nvidia: true
external_http_port: "3000"
external_https_port: "3001"
noto_fonts: "fonts-noto-cjk"
# application setup block
app_setup_block_enabled: true
app_setup_block: |
  The application can be accessed at:

  * http://yourhost:3000/
  * https://yourhost:3001/
# init diagram
init_diagram: |
  "google-chrome:latest": {
    docker-mods
    base {
      fix-attr +\nlegacy cont-init
    }
    docker-mods -> base
    legacy-services
    custom services
    init-services -> legacy-services
    init-services -> custom services
    custom services -> legacy-services
    legacy-services -> ci-service-check
    init-migrations -> init-adduser
    init-kasmvnc-end -> init-config
    init-os-end -> init-config
    init-config -> init-config-end
    init-crontab-config -> init-config-end
    init-config -> init-crontab-config
    init-mods-end -> init-custom-files
    init-adduser -> init-device-perms
    base -> init-envfile
    init-os-end -> init-kasmvnc
    init-nginx -> init-kasmvnc-config
    init-video -> init-kasmvnc-end
    base -> init-migrations
    init-config-end -> init-mods
    init-mods-package-install -> init-mods-end
    init-mods -> init-mods-package-install
    init-kasmvnc -> init-nginx
    init-adduser -> init-os-end
    init-device-perms -> init-os-end
    init-envfile -> init-os-end
    init-custom-files -> init-services
    init-kasmvnc-config -> init-video
    init-services -> svc-cron
    svc-cron -> legacy-services
    init-services -> svc-de
    svc-nginx -> svc-de
    svc-de -> legacy-services
    init-services -> svc-docker
    svc-de -> svc-docker
    svc-docker -> legacy-services
    init-services -> svc-kasmvnc
    svc-pulseaudio -> svc-kasmvnc
    svc-kasmvnc -> legacy-services
    init-services -> svc-kclient
    svc-kasmvnc -> svc-kclient
    svc-kclient -> legacy-services
    init-services -> svc-nginx
    svc-kclient -> svc-nginx
    svc-nginx -> legacy-services
    init-services -> svc-pulseaudio
    svc-pulseaudio -> legacy-services
  }
  Base Images: {
    "baseimage-kasmvnc:debianbookworm" <- "baseimage-debian:bookworm"
  }
  "google-chrome:latest" <- Base Images
# changelog
changelogs:
  - {date: "XX.XX.XX:", desc: "Update linuxserver/chromium image (via docker-google-chrome repo) to use Google Chrome on amd64 and Chromium on arm64. Updated wrapper script and documentation."}
  - {date: "XX.XX.XX:", desc: "Replace Chromium with Google Chrome on amd64; arm64 continues with Chromium backend. Update wrapper script, documentation, and build configurations."}
  - {date: "03.04.25:", desc: "Update chromium launch options to improve performance."}
  - {date: "10.02.24:", desc: "Update Readme with new env vars and ingest proper PWA icon."}
  - {date: "08.01.24:", desc: "Fix re-launch issue for chromium by purging temp files on launch."}
  - {date: "29.12.23:", desc: "Rebase to Debian Bookworm."}
  - {date: "13.05.23:", desc: "Rebase to Alpine 3.18."}
  - {date: "01.04.23:", desc: "Preserve arguments passed to Chromium and restructure to use wrapper."}
  - {date: "18.03.23:", desc: "Initial release."}
